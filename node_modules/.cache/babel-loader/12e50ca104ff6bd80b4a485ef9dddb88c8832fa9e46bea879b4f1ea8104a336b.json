{"ast":null,"code":"import request from \"@/utils/request\";\nimport Aside from \"@/components/Aside.vue\";\nimport Header from \"@/components/Header.vue\";\nexport default {\n  name: 'HomeView',\n  data() {\n    return {\n      //      tableData: Array(10).fill(item),\n      tableData: [],\n      username: \"\",\n      email: \"\",\n      address: \"\",\n      nickname: \"\",\n      dialogFormVisible: false,\n      multipleSelection: [],\n      form: {},\n      pageNum: 1,\n      //起始页\n      pageSize: 3,\n      //页的大小\n      total: 0,\n      msg: \"hello jjm\",\n      collapseBtnClass: 'el-icon-s-fold',\n      isCollapse: false,\n      sideWidth: 200,\n      logoTextShow: true\n    };\n  },\n  // 这是初始函数，自动执行\n  created() {\n    this.load();\n  },\n  components: {\n    Aside,\n    Header\n  },\n  methods: {\n    collapse() {\n      //点击收缩按钮触发收缩\n      this.isCollapse = !this.isCollapse;\n      if (this.isCollapse) {\n        this.sideWidth = 64;\n        this.collapseBtnClass = 'el-icon-s-unfold';\n        this.logoTextShow = false;\n      } else {\n        //展开\n        this.sideWidth = 200;\n        this.collapseBtnClass = 'el-icon-s-fold';\n        this.logoTextShow = true;\n      }\n    },\n    load() {\n      // 请求分页查询数据\n      request.get(\"http://localhost:8080/user/page\", {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          username: this.username,\n          address: this.address,\n          email: this.email\n        }\n      }).then(res => {\n        console.log(res);\n        this.tableData = res.records;\n        this.total = res.total;\n      });\n      // fetch(\"http://localhost:8080/user/\" +\n      //     \"page?pageNum=\" + this.pageNum + \"&pageSize=\" + this.pageSize + \"&username=\" + this.username + \"&email=\" + this.email)\n      //     .then(res => res.json()).then(res => {\n      //       console.log(res)\n      //       this.tableData = res.data\n      //       this.total = res.total\n      // })\n      //注意以上内容都是在fetch函数里面\n    },\n\n    reset() {\n      this.username = \"\";\n      this.email = \"\";\n      this.address = \"\";\n      this.load();\n    },\n    handleEdit(row) {\n      // 修改的话，要把这行原来的信息读到form列表里\n      this.form = row;\n      // 触发弹窗\n      this.dialogFormVisible = true;\n    },\n    handleAdd() {\n      // 增加的话，要建个空的form列表\n      this.form = {};\n      // 触发弹窗\n      this.dialogFormVisible = true;\n    },\n    handleDel(id) {\n      request.delete(\"http://localhost:8080/user/\" + id).then(res => {\n        if (res) {\n          this.$message.success(\"删除成功\");\n          this.dialogFormVisible = false;\n          this.load();\n        } else {\n          this.$message.error(\"删除失败\");\n        }\n      });\n    },\n    //这个函数在选中一行后会返回该行的信息\n    handleSelectionChange(val) {\n      console.log(val);\n      this.multipleSelection = val;\n    },\n    delBatch() {\n      let ids = this.multipleSelection.map(v => v.id); // [{}, {}, {}] => []\n      request.post(\"http://localhost:8080/user/del/batch\", ids).then(res => {\n        if (res) {\n          this.$message.success(\"批量删除成功\");\n          this.dialogFormVisible = false;\n          this.load();\n        } else {\n          this.$message.error(\"批量删除失败\");\n        }\n      });\n    },\n    cancel() {\n      this.dialogFormVisible = false;\n      this.load();\n    },\n    // 增加或更新都调用这个函数\n    save() {\n      request.post(\"http://localhost:8080/user\", this.form).then(res => {\n        if (res) {\n          this.$message.success(\"保存成功\");\n          this.dialogFormVisible = false;\n          this.load();\n        } else {\n          this.$message.error(\"保存失败\");\n        }\n      });\n    },\n    handleSizeChange(pageSize) {\n      console.log(pageSize);\n      this.pageSize = pageSize;\n      this.load();\n    },\n    handleCurrentChange(pageNum) {\n      console.log(pageNum);\n      this.pageNum = pageNum;\n      this.load();\n    }\n  }\n};","map":{"version":3,"names":["request","Aside","Header","name","data","tableData","username","email","address","nickname","dialogFormVisible","multipleSelection","form","pageNum","pageSize","total","msg","collapseBtnClass","isCollapse","sideWidth","logoTextShow","created","load","components","methods","collapse","get","params","then","res","console","log","records","reset","handleEdit","row","handleAdd","handleDel","id","delete","$message","success","error","handleSelectionChange","val","delBatch","ids","map","v","post","cancel","save","handleSizeChange","handleCurrentChange"],"sources":["src/views/Manage.vue"],"sourcesContent":["<template>\n  <el-container style=\"min-height: 100vh; \">\n    <!--侧边栏设置-->\n    <el-aside width=\"sideWidth + 'px'\" style=\"background-color: rgb(238, 241, 246); height: 100%; overflow: hidden;\n               box-shadow: 2px 0 6px rgb(0 21 41 / 35%);\">\n      <!--菜单栏-->\n      <Aside :isCollapse=\"isCollapse\" :logoTextShow=\"logoTextShow\"></Aside>\n    </el-aside>\n\n    <el-container>\n      <!--头部-->\n      <el-header style=\"font-size: 12px; border-bottom: 1px solid #ccc; line-height: 60px; display: flex\">\n        <Header :collapseBtnClass=\"collapseBtnClass\" :collapse=\"collapse\"></Header>\n      </el-header>\n      <!--主体-->\n      <el-main>\n        <!--页签-->\n        <div style=\"margin-bottom: 30px\">\n          <el-breadcrumb separator=\"/\">\n            <el-breadcrumb-item :to=\"{ path: '/' }\">首页</el-breadcrumb-item>\n            <el-breadcrumb-item>用户管理</el-breadcrumb-item>\n          </el-breadcrumb>\n        </div>\n\n        <!--从上往下依次是搜索部分、增删改查、表格、页码-->\n        <div style=\"margin: 10px 0\">\n          <!--搜索框和按钮-->\n          <!--v-model实现双向绑定-->\n          <el-input style=\"width: 200px\" placeholder=\"请输入名称\" suffix-icon=\"el-icon-user\" v-model=\"username\" class=\"ml-5\"></el-input>\n          <el-input style=\"width: 200px\" placeholder=\"请输入地址\" suffix-icon=\"el-icon-phone\" v-model=\"address\" class=\"ml-5\"></el-input>\n          <el-input style=\"width: 200px\" placeholder=\"请输入邮箱\" suffix-icon=\"el-icon-message\" v-model=\"email\" class=\"ml-5\"></el-input>\n          <!--用class引用CSS文件里的设置-->\n          <!--primary设置蓝色-->\n          <!--@click绑定load函数-->\n          <el-button class=\"ml-5\" type=\"primary\" @click=\"load\">搜索</el-button>\n          <el-button class=\"ml-5\" type=\"warning\" @click=\"reset\">重置</el-button>\n        </div>\n\n        <div style=\"margin: 10px 0\">\n          <el-button type=\"primary\" @click=\"handleAdd\">新增 <i class=\"el-icon-circle-plus-outline\"></i></el-button>\n          <el-popconfirm\n              class=\"ml-5\"\n              confirm-button-text='好的'\n              cancel-button-text='不用了'\n              icon=\"el-icon-info\"\n              icon-color=\"red\"\n              title=\"您确定删除吗？\"\n              @confirm=\"delBatch\">\n            <el-button type=\"danger\" slot=\"reference\">批量删除 <i class=\"el-icon-remove-outline\"></i></el-button>\n          </el-popconfirm>\n          <el-button type=\"primary\" class=\"ml-5\">导入 <i class=\"el-icon-bottom\"></i></el-button>\n          <el-button type=\"primary\">导出 <i class=\"el-icon-top\"></i></el-button>\n        </div>\n\n        <!--border设置边框，stripe设置斑马线表格-->\n        <el-table :data=\"tableData\" border stripe header-cell-class-name=\"headerBg\" @selection-change=\"handleSelectionChange\">\n          <el-table-column\n              type=\"selection\"\n              width=\"55\">\n          </el-table-column>\n\n          <el-table-column prop=\"id\" label=\"ID\" width=\"80\">\n          </el-table-column>\n\n          <el-table-column prop=\"username\" label=\"用户名\" width=\"140\">\n          </el-table-column>\n\n          <el-table-column prop=\"nickname\" label=\"昵称\" width=\"120\">\n          </el-table-column>\n\n          <el-table-column prop=\"address\" label=\"地址\">\n          </el-table-column>\n\n          <el-table-column prop=\"email\" label=\"邮箱\">\n          </el-table-column>\n\n          <el-table-column prop=\"phone\" label=\"电话\">\n          </el-table-column>\n\n\n          <el-table-column label=\"操作\">\n            <!--这个scope记录了该行的信息-->\n            <template slot-scope=\"scope\">\n              <el-button type=\"warning\" @click=\"handleEdit(scope.row)\">编辑 <i class=\"el-icon-edit\"></i></el-button>\n              <el-popconfirm\n                  class=\"ml-5\"\n                  confirm-button-text='好的'\n                  cancel-button-text='不用了'\n                  icon=\"el-icon-info\"\n                  icon-color=\"red\"\n                  title=\"您确定删除吗？\"\n                  @confirm=\"handleDel(scope.row.id)\">\n                  <el-button type=\"danger\" slot=\"reference\">删除 <i class=\"el-icon-remove-outline\"></i></el-button>\n              </el-popconfirm>\n            </template>\n          </el-table-column>\n\n        </el-table>\n\n        <div style=\"padding: 10px 0\">\n          <el-pagination\n              @size-change=\"handleSizeChange\"\n              @current-change=\"handleCurrentChange\"\n              :current-page=\"pageNum\"\n              :page-sizes=\"[2, 5, 10, 20]\"\n              :page-size=\"pageSize\"\n              layout=\"total, sizes, prev, pager, next, jumper\"\n              :total=\"total\">\n          </el-pagination>\n        </div>\n\n\n        <!--设置弹窗，当dialogFormVisible为true时，就会弹出来-->\n        <el-dialog title=\"用户信息\" :visible.sync=\"dialogFormVisible\" width=\"30%\" >\n          <el-form label-width=\"80px\" size=\"small\">\n            <el-form-item label=\"用户名\">\n              <!--用v-model实现双向绑定，无论哪一方的数据变了，另一方也会变-->\n              <el-input v-model=\"form.username\" autocomplete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"昵称\">\n              <el-input v-model=\"form.nickname\" autocomplete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"邮箱\">\n              <el-input v-model=\"form.email\" autocomplete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"电话\">\n              <el-input v-model=\"form.phone\" autocomplete=\"off\"></el-input>\n            </el-form-item>\n            <el-form-item label=\"地址\">\n              <el-input v-model=\"form.address\" autocomplete=\"off\"></el-input>\n            </el-form-item>\n          </el-form>\n          <div slot=\"footer\" class=\"dialog-footer\">\n            <el-button @click=\"cancel\">取 消</el-button>\n            <el-button type=\"primary\" @click=\"save\">确 定</el-button>\n          </div>\n        </el-dialog>\n\n      </el-main>\n\n    </el-container>\n\n  </el-container>\n</template>\n\n\n\n<!--用JS写的用来完善HTML的属性方法等等-->\n<script>\nimport request from \"@/utils/request\"\nimport Aside from \"@/components/Aside.vue\";\nimport Header from \"@/components/Header.vue\";\nexport default {\n  name: 'HomeView',\n  data()\n  {\n    return{\n//      tableData: Array(10).fill(item),\n      tableData: [],\n      username: \"\",\n      email: \"\",\n      address: \"\",\n      nickname: \"\",\n      dialogFormVisible: false,\n      multipleSelection: [],\n      form: {},\n      pageNum: 1,  //起始页\n      pageSize: 3, //页的大小\n      total: 0,\n      msg: \"hello jjm\",\n      collapseBtnClass: 'el-icon-s-fold',\n      isCollapse:false,\n      sideWidth: 200,\n      logoTextShow: true\n    }\n  },\n\n  // 这是初始函数，自动执行\n  created()\n  {\n    this.load()\n  },\n\n  components: {\n    Aside,\n    Header\n  },\n\n\n  methods:{\n    collapse()\n    { //点击收缩按钮触发收缩\n      this.isCollapse = !this.isCollapse\n      if (this.isCollapse)\n      {\n        this.sideWidth = 64;\n        this.collapseBtnClass = 'el-icon-s-unfold';\n        this.logoTextShow = false\n      }\n      else\n      { //展开\n        this.sideWidth = 200;\n        this.collapseBtnClass = 'el-icon-s-fold';\n        this.logoTextShow = true;\n      }\n    },\n\n    load()\n    {\n      // 请求分页查询数据\n      request.get(\"http://localhost:8080/user/page\", {\n        params:\n            {\n              pageNum: this.pageNum,\n              pageSize: this.pageSize,\n              username: this.username,\n              address: this.address,\n              email: this.email\n            }\n      }).then(res =>{\n            console.log(res)\n            this.tableData = res.records\n            this.total = res.total\n          })\n      // fetch(\"http://localhost:8080/user/\" +\n      //     \"page?pageNum=\" + this.pageNum + \"&pageSize=\" + this.pageSize + \"&username=\" + this.username + \"&email=\" + this.email)\n      //     .then(res => res.json()).then(res => {\n      //       console.log(res)\n      //       this.tableData = res.data\n      //       this.total = res.total\n      // })\n      //注意以上内容都是在fetch函数里面\n    },\n\n    reset()\n    {\n      this.username = \"\"\n      this.email = \"\"\n      this.address = \"\"\n      this.load()\n    },\n\n    handleEdit(row)\n    {\n      // 修改的话，要把这行原来的信息读到form列表里\n      this.form = row\n      // 触发弹窗\n      this.dialogFormVisible = true\n    },\n\n    handleAdd()\n    {\n      // 增加的话，要建个空的form列表\n      this.form = {}\n      // 触发弹窗\n      this.dialogFormVisible = true\n    },\n\n    handleDel(id)\n    {\n      request.delete(\"http://localhost:8080/user/\" + id).then(res =>{\n        if (res)\n        {\n          this.$message.success(\"删除成功\")\n          this.dialogFormVisible = false\n          this.load()\n        }\n        else\n        {\n          this.$message.error(\"删除失败\")\n        }\n      })\n    },\n\n    //这个函数在选中一行后会返回该行的信息\n    handleSelectionChange(val)\n    {\n      console.log(val)\n      this.multipleSelection = val\n    },\n    delBatch()\n    {\n      let ids = this.multipleSelection.map(v => v.id) // [{}, {}, {}] => []\n      request.post(\"http://localhost:8080/user/del/batch\", ids).then(res =>{\n        if (res)\n        {\n          this.$message.success(\"批量删除成功\")\n          this.dialogFormVisible = false\n          this.load()\n        }\n        else\n        {\n          this.$message.error(\"批量删除失败\")\n        }\n      })\n    },\n\n    cancel()\n    {\n      this.dialogFormVisible = false\n      this.load()\n    },\n\n    // 增加或更新都调用这个函数\n    save()\n    {\n      request.post(\"http://localhost:8080/user\", this.form).then(res => {\n        if (res)\n        {\n          this.$message.success(\"保存成功\")\n          this.dialogFormVisible = false\n          this.load()\n        }\n        else\n        {\n          this.$message.error(\"保存失败\")\n        }\n      })\n    },\n\n    handleSizeChange(pageSize)\n    {\n      console.log(pageSize)\n      this.pageSize = pageSize\n      this.load()\n    },\n    handleCurrentChange(pageNum)\n    {\n      console.log(pageNum)\n      this.pageNum = pageNum\n      this.load()\n    }\n\n  }\n}\n</script>\n\n\n<!--在此处定义自定义的style-->\n<!--！important用于提高该项的优先级-->\n<style>\n.headerBg{\n  background: #cccccc !important;\n}\n</style>\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}