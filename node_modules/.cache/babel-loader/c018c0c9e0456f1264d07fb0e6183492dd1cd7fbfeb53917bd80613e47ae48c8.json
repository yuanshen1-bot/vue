{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport Vue from 'vue';\nimport VueRouter from 'vue-router';\nimport HomeView from '../views/Manage.vue';\nimport store from '../store';\nVue.use(VueRouter);\nconst routes = [{\n  path: '/login',\n  name: 'Login',\n  component: () => import('../views/Login.vue')\n}, {\n  path: '/register',\n  name: 'Register',\n  component: () => import('../views/Register.vue')\n}, {\n  path: '/about',\n  name: 'about',\n  component: () => import( /* webpackChunkName: \"about\" */'../views/AboutView.vue')\n}];\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n});\nexport const setRoutes = () => {\n  const storeMenus = localStorage.getItem(\"menus\");\n  if (storeMenus) {\n    // 拼装动态路由\n    const manageRoute = {\n      path: '/',\n      component: () => import('../views/Manage.vue'),\n      redirect: \"/home\",\n      children: []\n    };\n    const menus = JSON.parse(storeMenus);\n    menus.forEach(item => {\n      if (item.path) {\n        // 当且仅当path不为空的时候才去设置路由\n        let itemMenu = {\n          path: item.path.replace(\"/\", \"\"),\n          name: item.name,\n          component: () => import('../views/' + item.pagePath + '.vue')\n        };\n        manageRoute.children.push(itemMenu); // 这里的children是路由设置中的子路由的意思，不是自己设置的子菜单\n      } else if (item.children.length) {\n        // 这里的children是指自己设置的子菜单\n        item.children.forEach(item => {\n          if (item.path) {\n            let itemMenu = {\n              path: item.path.replace(\"/\", \"\"),\n              name: item.name,\n              component: () => import('../views/' + item.pagePath + '.vue')\n            };\n            manageRoute.children.push(itemMenu);\n          }\n        });\n      }\n    });\n    // 动态添加到现在的路由对象\n    router.addRoute(manageRoute);\n  }\n};\n// \nsetRoutes();\nrouter.beforeEach((to, from, next) => {\n  localStorage.setItem(\"currentPathName\", to.name); // 设置当前的路由名称\n  store.commit(\"setPath\"); // 触发store的数据更新\n  next(); // 放行路由，必须写，不写路由出不来\n});\n\nexport default router;","map":{"version":3,"names":["Vue","VueRouter","HomeView","store","use","routes","path","name","component","router","mode","base","process","env","BASE_URL","setRoutes","storeMenus","localStorage","getItem","manageRoute","redirect","children","menus","JSON","parse","forEach","item","itemMenu","replace","pagePath","push","length","addRoute","beforeEach","to","from","next","setItem","commit"],"sources":["D:/codes/SpringBoot/demo/vue/src/router/index.js"],"sourcesContent":["import Vue from 'vue'\nimport VueRouter from 'vue-router'\nimport HomeView from '../views/Manage.vue'\nimport store from '../store';\n\n\nVue.use(VueRouter)\n\nconst routes = [\n  {\n    path: '/login',\n    name: 'Login',\n    component: () => import('../views/Login.vue')\n  },\n  {\n    path: '/register',\n    name: 'Register',\n    component: () => import('../views/Register.vue')\n  },\n  {\n    path: '/about',\n    name: 'about',\n    component: () => import(/* webpackChunkName: \"about\" */ '../views/AboutView.vue')\n  },\n]\n\nconst router = new VueRouter({\n  mode: 'history',\n  base: process.env.BASE_URL,\n  routes\n})\n\nexport const setRoutes = () => {\n  const storeMenus = localStorage.getItem(\"menus\");\n  if (storeMenus) {\n    // 拼装动态路由\n    const manageRoute = { path: '/', component: () => import('../views/Manage.vue'), redirect: \"/home\", children: [] }\n    const menus = JSON.parse(storeMenus)\n    menus.forEach(item => {\n      if (item.path) {  // 当且仅当path不为空的时候才去设置路由\n        let itemMenu = { path: item.path.replace(\"/\", \"\"), name: item.name, component: () => import('../views/' + item.pagePath + '.vue') }\n        manageRoute.children.push(itemMenu)   // 这里的children是路由设置中的子路由的意思，不是自己设置的子菜单\n      } else if (item.children.length){   // 这里的children是指自己设置的子菜单\n        item.children.forEach(item => {\n          if (item.path) {\n            let itemMenu = { path: item.path.replace(\"/\", \"\"), name: item.name, component: () => import('../views/' + item.pagePath + '.vue') }\n            manageRoute.children.push(itemMenu)\n          }\n        })\n      }\n    })\n    // 动态添加到现在的路由对象\n    router.addRoute(manageRoute)\n  }\n}\n// \nsetRoutes()\n\n\n\nrouter.beforeEach((to, from, next) => {\n  localStorage.setItem(\"currentPathName\", to.name)   // 设置当前的路由名称\n  store.commit(\"setPath\") // 触发store的数据更新\n  next()  // 放行路由，必须写，不写路由出不来\n})\n\nexport default router\n"],"mappings":";AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,KAAK,MAAM,UAAU;AAG5BH,GAAG,CAACI,GAAG,CAACH,SAAS,CAAC;AAElB,MAAMI,MAAM,GAAG,CACb;EACEC,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,oBAAoB;AAC9C,CAAC,EACD;EACEF,IAAI,EAAE,WAAW;EACjBC,IAAI,EAAE,UAAU;EAChBC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,uBAAuB;AACjD,CAAC,EACD;EACEF,IAAI,EAAE,QAAQ;EACdC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEA,CAAA,KAAM,MAAM,EAAC,+BAAgC,wBAAwB;AAClF,CAAC,CACF;AAED,MAAMC,MAAM,GAAG,IAAIR,SAAS,CAAC;EAC3BS,IAAI,EAAE,SAAS;EACfC,IAAI,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ;EAC1BT;AACF,CAAC,CAAC;AAEF,OAAO,MAAMU,SAAS,GAAGA,CAAA,KAAM;EAC7B,MAAMC,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAChD,IAAIF,UAAU,EAAE;IACd;IACA,MAAMG,WAAW,GAAG;MAAEb,IAAI,EAAE,GAAG;MAAEE,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,qBAAqB,CAAC;MAAEY,QAAQ,EAAE,OAAO;MAAEC,QAAQ,EAAE;IAAG,CAAC;IAClH,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACR,UAAU,CAAC;IACpCM,KAAK,CAACG,OAAO,CAACC,IAAI,IAAI;MACpB,IAAIA,IAAI,CAACpB,IAAI,EAAE;QAAG;QAChB,IAAIqB,QAAQ,GAAG;UAAErB,IAAI,EAAEoB,IAAI,CAACpB,IAAI,CAACsB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;UAAErB,IAAI,EAAEmB,IAAI,CAACnB,IAAI;UAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,WAAW,GAAGkB,IAAI,CAACG,QAAQ,GAAG,MAAM;QAAE,CAAC;QACnIV,WAAW,CAACE,QAAQ,CAACS,IAAI,CAACH,QAAQ,CAAC,EAAG;MACxC,CAAC,MAAM,IAAID,IAAI,CAACL,QAAQ,CAACU,MAAM,EAAC;QAAI;QAClCL,IAAI,CAACL,QAAQ,CAACI,OAAO,CAACC,IAAI,IAAI;UAC5B,IAAIA,IAAI,CAACpB,IAAI,EAAE;YACb,IAAIqB,QAAQ,GAAG;cAAErB,IAAI,EAAEoB,IAAI,CAACpB,IAAI,CAACsB,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;cAAErB,IAAI,EAAEmB,IAAI,CAACnB,IAAI;cAAEC,SAAS,EAAEA,CAAA,KAAM,MAAM,CAAC,WAAW,GAAGkB,IAAI,CAACG,QAAQ,GAAG,MAAM;YAAE,CAAC;YACnIV,WAAW,CAACE,QAAQ,CAACS,IAAI,CAACH,QAAQ,CAAC;UACrC;QACF,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;IACF;IACAlB,MAAM,CAACuB,QAAQ,CAACb,WAAW,CAAC;EAC9B;AACF,CAAC;AACD;AACAJ,SAAS,EAAE;AAIXN,MAAM,CAACwB,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EACpCnB,YAAY,CAACoB,OAAO,CAAC,iBAAiB,EAAEH,EAAE,CAAC3B,IAAI,CAAC,EAAG;EACnDJ,KAAK,CAACmC,MAAM,CAAC,SAAS,CAAC,EAAC;EACxBF,IAAI,EAAE,EAAE;AACV,CAAC,CAAC;;AAEF,eAAe3B,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}